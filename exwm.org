#+TITLE: EXWM Configuration

This file is meant to be loaded only when emacs is used as a window manager. This whole configuration is greatly inspired from the [[https://www.youtube.com/watch?v=GX_LGfuojcE&list=PLEoMzSkcN8oNPbEMYEtswOVTvq7CVddCS&index=6][Emacs From Scratch series]] tutorials.

* Dependencies

The following packages need to be installed on the system for this configuration to work:

#+begin_src sh :eval no
sudo apt install autorandr picom suckless-tools xss-lock polybar pasystray blueman dunst notify-send
#+end_src

* Startup Script

The following script will be used to start emacs in window management mode:

#+begin_src sh :tangle exwm/exwm-start.sh :mkdirp yes :shebang #!/bin/sh
  # Run the screen compositor
  picom &

  # Enable screen locking on suspend
  xss-lock -- slock &

  # Start exwm
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l /home/alex/.emacs.d/exwm/exwm.el
#+end_src

* Desktop File

The following file must be stored in ~/usr/share/xsessions/EXWM.desktop~ for EXWM to be available at login:

#+begin_src conf :tangle exwm/exwm.desktop :mkdirp yes
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh /home/alex/.emacs.d/exwm/exwm-start.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopName=exwm
#+end_src

This configuration then needs to be copied where the login manager can find it:

#+begin_src sh :eval no
  sudo ln -s  ~/.emacs.d/exwm/exwm.desktp /usr/share/xsessions/
#+end_src

* Configuration

Now that we are all setup, we are ready to configure exwm.

** Preambule

We will use some function to help us setup the configurations.

#+begin_src emacs-lisp :tangle exwm/exwm.el :mkdirp t
    (defun my/run-in-background (command)
      "Run COMMAND in the background. This function is not robust to spaces in command arguments."
      (let ((command-parts (split-string command "[ ]+")))
	(apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

    (defun my/exwm-update-title ()
      "Update the buffer name to the one of the window."
      (exwm-workspace-rename-buffer
       (if exwm-title
	   (format "%s: %s" exwm-class-name exwm-title)
	 exwm-class-name)))

  (defun my/update-displays ()
    "Call autorandr to update the display setting."
    (my/run-in-background "autorandr --change --force")
    (message "Display config: %s"
	     (string-trim (shell-command-to-string "autorandr --current"))))
#+end_src

** Main Configuration

#+begin_src emacs-lisp :tangle exwm/exwm.el :mkdirp t
  (defun my/exwm-init ()
    "Initialize exwm to my tastes."

    ;; Start an emacs server. This is used for IPC with polybar
    (server-start)

    ;; Let's remove emacs menu bar, it is wasing useful estate.
    (menu-bar-mode -1)

    ;; start the Polybar panel
    (start-process-shell-command "polybar" nil "polybar panel")
    (my/run-in-background "nm-applet")
    (my/run-in-background "pasystray")
    (my/run-in-background "blueman-applet")

    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1))

  (use-package exwm
    :ensure t
    :hook
    ((exwm-update-class . my/exwm-update-title)
     (exwm-update-title . my/exwm-update-title)
     (exwm-init . my/exwm-init))

    :init
    ;; Sent the mouse to the selected workspace display
    (setq exwm-worspace-warp-cursor t)

    ;; Focus follow the mouse
    (setq focus-follows-mouse t)

    ;; Set the screen resolution
    (require 'exwm-randr)
    (exwm-randr-enable)
    (add-hook 'exwm-randr-screen-change-hook #'my/update-displays)
    (my/update-displays)

    ;; Only workspace 0 is on the laptop screen when it is docked
    (setq exwm-randr-workspace-monitor-plist '(0 "eDP-1"))

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
	  '(?\C-x
	    ?\C-u
	    ?\C-h
	    ?\M-x
	    ?\M-`
	    ?\M-&
	    ?\M-:
	    ?\C-\M-j  ;; Buffer list
	    ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
	  `(
	    ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)

	    ;; Move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)

	    ;; Switch workspace
	    ([?\s-w] . exwm-workspace-switch)

	    ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

    (exwm-enable))
#+end_src

** Desktop Controls

Control the desktop from emacs using well known programs ([[https://github.com/DamienCassou/desktop-environment][details]]):

#+begin_src emacs-lisp :tangle exwm/exwm.el :mkdirp t
  (use-package desktop-environment
    :after exwm
    :init (desktop-environment-mode)
    :ensure t)
#+end_src

* Setting up screen layouts

~autorandr~ is called by ~my/update-displays~ each time the screen changes. In order for the layouts to work properly, we need to save each configuration with a command similar to:

#+begin_src sh :eval no
autorandr --save profile-name
#+end_src

where the profile name is the name of the configuration (e.g. mobile, docked, ...).

If the screen is yellowish, make sure to remove the /night mode/ before running ~autorandr~.

* Polybar

Polybar is a panel where applets live.

** Workspace index

This code allows polybar to show the current workspace index:

#+begin_src emacs-lisp :tangle exwm/exwm.el :mkdirp t
  (defun efs/send-polybar-hook (module-name hook-index)
    "Send a message to polybar to execute HOOK-INDEX for MODULE-NAME."
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

    ;; Update panel indicator when workspace changes
    (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)
#+end_src

** Configuration

#+begin_src conf :tangle ~/.config/polybar/config :mkdirp t
; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/panel]
width = 100%
height = 20
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 2
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=12:weight=bold;2"
font-1 = "Font Awesome:size=12;2"
font-2 = "Material Icons:size=12;5"
font-3 = "Fira Mono:size=12;-3"

modules-left = exwm-workspace
modules-right = cpu temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 20

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}
#+end_src

* Notifications

We will use dunst for desktop notifications.

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp t
  [global]
      ### Display ###
      monitor = 0

      # The geometry of the window:
      #   [{width}]x{height}[+/-{x}+/-{y}]
      geometry = "500x10-10+50"

      # Show how many messages are currently hidden (because of geometry).
      indicate_hidden = yes

      # Shrink window if it's smaller than the width.  Will be ignored if
      # width is 0.
      shrink = no

      # The transparency of the window.  Range: [0; 100].
      transparency = 10

      # The height of the entire notification.  If the height is smaller
      # than the font height and padding combined, it will be raised
      # to the font height and padding.
      notification_height = 0

      # Draw a line of "separator_height" pixel height between two
      # notifications.
      # Set to 0 to disable.
      separator_height = 1
      separator_color = frame

      # Padding between text and separator.
      padding = 8

      # Horizontal padding.
      horizontal_padding = 8

      # Defines width in pixels of frame around the notification window.
      # Set to 0 to disable.
      frame_width = 2

      # Defines color of the frame around the notification window.
      frame_color = "#89AAEB"

      # Sort messages by urgency.
      sort = yes

      # Don't remove messages, if the user is idle (no mouse or keyboard input)
      # for longer than idle_threshold seconds.
      idle_threshold = 120

      ### Text ###

      font = Cantarell 20

      # The spacing between lines.  If the height is smaller than the
      # font height, it will get raised to the font height.
      line_height = 0
      markup = full

      # The format of the message.  Possible variables are:
      #   %a  appname
      #   %s  summary
      #   %b  body
      #   %i  iconname (including its path)
      #   %I  iconname (without its path)
      #   %p  progress value if set ([  0%] to [100%]) or nothing
      #   %n  progress value if set without any extra characters
      #   %%  Literal %
      # Markup is allowed
      format = "<b>%s</b>\n%b"

      # Alignment of message text.
      # Possible values are "left", "center" and "right".
      alignment = left

      # Show age of message if message is older than show_age_threshold
      # seconds.
      # Set to -1 to disable.
      show_age_threshold = 60

      # Split notifications into multiple lines if they don't fit into
      # geometry.
      word_wrap = yes

      # When word_wrap is set to no, specify where to make an ellipsis in long lines.
      # Possible values are "start", "middle" and "end".
      ellipsize = middle

      # Ignore newlines '\n' in notifications.
      ignore_newline = no

      # Stack together notifications with the same content
      stack_duplicates = true

      # Hide the count of stacked notifications with the same content
      hide_duplicate_count = false

      # Display indicators for URLs (U) and actions (A).
      show_indicators = yes

      ### Icons ###

      # Align icons left/right/off
      icon_position = left

      # Scale larger icons down to this size, set to 0 to disable
      max_icon_size = 88

      ### History ###

      # Should a notification popped up from history be sticky or timeout
      # as if it would normally do.
      sticky_history = no

      # Maximum amount of notifications kept in history
      history_length = 20

      ### Misc/Advanced ###

      # Browser for opening urls in context menu.
      browser = xdg-open

      # Always run rule-defined scripts, even if the notification is suppressed
      always_run_script = true

      # Define the title of the windows spawned by dunst
      title = Dunst

      # Define the class of the windows spawned by dunst
      class = Dunst

      startup_notification = false
      verbosity = mesg

      # Define the corner radius of the notification window
      # in pixel size. If the radius is 0, you have no rounded
      # corners.
      # The radius will be automatically lowered if it exceeds half of the
      # notification height to avoid clipping text and/or icons.
      corner_radius = 4

      mouse_left_click = close_current
      mouse_middle_click = do_action
      mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
      # Calculate the dpi to use on a per-monitor basis.
      # If this setting is enabled the Xft.dpi value will be ignored and instead
      # dunst will attempt to calculate an appropriate dpi value for each monitor
      # using the resolution and physical size. This might be useful in setups
      # where there are multiple screens with very different dpi values.
      per_monitor_dpi = false

  [shortcuts]

      # Shortcuts are specified as [modifier+][modifier+]...key
      # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
      # "mod3" and "mod4" (windows-key).
      # Xev might be helpful to find names for keys.

      # Close notification.
      #close = ctrl+space

      # Close all notifications.
      #close_all = ctrl+shift+space

      # Redisplay last message(s).
      # On the US keyboard layout "grave" is normally above TAB and left
      # of "1". Make sure this key actually exists on your keyboard layout,
      # e.g. check output of 'xmodmap -pke'
      history = ctrl+grave

      # Context menu.
      context = ctrl+shift+period

  [urgency_low]
      # IMPORTANT: colors have to be defined in quotation marks.
      # Otherwise the "#" and following would be interpreted as a comment.
      background = "#222222"
      foreground = "#888888"
      timeout = 10

  [urgency_normal]
      background = "#1c1f26"
      foreground = "#ffffff"
      timeout = 10

  [urgency_critical]
      background = "#900000"
      foreground = "#ffffff"
      frame_color = "#ff0000"
      timeout = 0
#+end_src

* Tangle on save

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
