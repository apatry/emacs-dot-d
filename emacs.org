#+TITLE: A litterate programming approach to customize emacs
#+AUTHOR: Alex Patry
#+EMAIL: alex@nlpfu.com

* Introduction

This file is used to customize emacs to my needs. The pattern is to
add one section per type of configuration and then make sure that
all modules and configuration are defined in it.

The organization of this file is greatly inspired from Joost
Diepenmaat and the code he shared at
https://github.com/joodie/emacs-literal-config.

If you want to use this structure yourself, the easiest way to get
started is probably to clone this repository and move it at
=~/.emacs.d=. Make sure that no file is named =~/.emacs= as it would
be used instead of =~/.emacs.d/init.el= when emacs is starting.

* Prologue

Before we start actually configuring our environment, let's define
some utilities that will help us get organized:

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))

    ;; Add all the package repositories that we want to use.
    (add-to-list 'package-archives
		 (cons "melpa" (concat proto "://melpa.org/packages/")) t))

  ;; Initialize the package module, this must be after 'package-archives
  ;; has been set
  (when (< emacs-major-version 27) (package-initialize))

  ;; Reloading the list of packages takes time, we will do it at most
  ;; once. This variable will be true if the list has already be
  ;; reloaded.
  (setq my/package-refreshed nil)

  ;; Install a package if it is not already installed.
  (defun my/install (package)
    (unless (package-installed-p package)
      (unless my/package-refreshed
	(package-refresh-contents)
	(setq my/package-refreshed t))
      (package-install package)))
#+END_SRC

#+RESULTS:
: my/install

* Use Package

At first, I was using =my/install= for all my packages. I decided to
test drive =use-package= and see how it could make things
better. Before migrating to it, my startup time was:

#+BEGIN_VERBATIM
time emacs -l .emacs.d/init.el  -batch --eval '(message "Hello, world!")'
Loading /etc/emacs/site-start.d/00debian.el (source)...
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading debian-ispell...
Loading /var/cache/dictionaries-common/emacsen-ispell-default.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...
Tangled 35 code blocks from emacs.org
Loading /home/alex/.emacs.d/emacs.el (source)...
Loading /home/alex/.emacs.d/custom.el (source)...
Loaded /home/alex/.emacs.d/emacs.el
Hello, world!
emacs -l .emacs.d/init.el -batch --eval '(message "Hello, world!")'  1.12s user 0.06s system 99% cpu 1.188 total
#+END_VERBATIM

After the migration, it was:

#+BEGIN_VERBATIM
time emacs -l .emacs.d/init.el  -batch --eval '(message "Hello, world!")'
Loading /etc/emacs/site-start.d/00debian.el (source)...
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading debian-ispell...
Loading /var/cache/dictionaries-common/emacsen-ispell-default.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...
Loading /home/alex/.emacs.d/emacs.el (source)...
Loading /home/alex/.emacs.d/custom.el (source)...
Loaded ~/.emacs.d/emacs.el
Hello, world!
emacs -l .emacs.d/init.el -batch --eval '(message "Hello, world!")'  1.09s user 0.03s system 99% cpu 1.124 total
#+END_VERBATIM

#+BEGIN_SRC emacs-lisp
  (my/install 'use-package)

  ;; This is needed to run the compiled version of this code.
  ;; See https://github.com/jwiegley/use-package/issues/436
  (require 'use-package)

  ;; uncomment the following lines to gather statistics about package load time
  ;; run 'use-package-report to see statistics
  ; (setq use-package-compute-statistics t)

  ;; make sure packages are updated when new versions are available
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)

    :ensure t)
#+END_SRC

#+RESULTS:
: t

* Startup configuration

By default, emacs show a welcome screen. While it can be useful the
first time we start emacs, it gets old very fast. Let's disable it:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

Also, emacs comes with a toolbar that is next to useless, let's
reclaim back this space:

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
    (tool-bar-mode -1))
#+END_SRC

* Custom commands

#+BEGIN_SRC emacs-lisp :results silent output
  (defun dot-emacs ()
    "Shortcut to open this file. I often tweak my emacs config,
  this short cut makes it easier to get here."
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
#+END_SRC

* Flycheck

Flycheck checks the syntax in many programming language and add visual
markers when it detects an error. We want to enable it by default:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 2
    :config (global-flycheck-mode)
    :ensure t)
#+END_SRC

More info at https://www.flycheck.org/en/latest/

* Backups

By default, emacs save backup files in the same directory as the files
we are editing. Instead of adding files everywhere, let's use a
dedicated directory for these backups:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
#+END_SRC

Let's also have more backup per file as suggested [[http://stackoverflow.com/a/151946][here]]:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC

* Color theme

I will give [[https://github.com/hlissner/emacs-doom-themes#features][doom-themes]] a try:

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
      (load-theme 'doom-gruvbox t)
      (doom-themes-org-config)
    :ensure t)
#+END_SRC

* Company

Setup auto-complete powered by company-mode:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :ensure t)
#+END_SRC

* Git

Let's use magit to deal with git command from within emacs:

#+BEGIN_SRC emacs-lisp
  (use-package magit
   :bind ("C-x g" . magit-status)
   :commands magit-status
   :ensure t)
#+END_SRC

Note that we load =magit= only when =magit-status= is called. This is
because =magit= is the longest package to load at startup. Doing so
improved my startup time by about 25%.

We will also add git modification into the [[https://github.com/syohex/emacs-git-gutter][gutter]]:

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config (global-git-gutter-mode +1)
    :ensure t)
#+END_SRC

* Graphviz

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :mode "\\.dot\\'"
    :ensure t)
#+END_SRC

* Groovy

Add support for groovy files:

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :mode "\\.groovy\\'\\|\\.gradle\\'"
    :ensure t)
#+END_SRC

* Ivy

Ivy is an auto-completion framework for emacs. I am trying it out as a
replacement for helm. Let's see how it goes:

#+begin_src emacs-lisp
  (use-package ivy
    :config
      (setq ivy-use-virtual-buffers t)
      (ivy-mode +1)
    :ensure t)
#+end_src

** Counsel

Counsel is the UI for ivy:

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config
      (counsel-mode +1)
    :ensure t)
#+end_src

** ivy-explorer

Display ivy completions in a grid instead of a list.

#+begin_src emacs-lisp
  (use-package ivy-explorer
    :after counsel
    :config
      (ivy-explorer-mode 1)
    :ensure t)
#+end_src

* Lsp

** Installing Requirements

#+BEGIN_SRC sh
pip3 install python-language-server
sudo npm i -g bash-language-server
#+END_SRC

** Installing the client

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :hook ((java-mode . lsp)
	      (python-mode . lsp)
	      (scala-mode . lsp)
	      ; (sh-mode . lsp)
	      (sql-mode . lsp)
	      (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp
      :ensure t)

    (use-package lsp-java
      :ensure t)

    (use-package lsp-ui
      :commands lsp-ui-mode
      :ensure t)

    (use-package lsp-ivy
      :commands lsp-ivy-workspace-symbol
      :ensure t)

    (use-package lsp-treemacs
      :commands lsp-treemacs-errors-list
      :ensure t)

    (use-package which-key
      :config (which-key-mode)
      :ensure t)
#+END_SRC

#+RESULTS:

* Markdown

Add support for markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    :ensure t)
#+END_SRC

* Nix

Let's add support for nix, a package manager.

#+BEGIN_SRC emacs-lisp :results silent
  (use-package nix-mode
    :mode "\\.nix\\'"
    :ensure t)
#+END_SRC

#+RESULTS:

* Pig

Use [[https://github.com/motus/pig-mode][pig-mode]] with indent of 2:

#+BEGIN_SRC emacs-lisp
  (use-package pig-mode
    :config (setq pig-indent-level 2)
    :mode "\\.pig\\'"
    :ensure t)
#+END_SRC

* Javascript

Javascript mode is shipped by default with emacs, we just want to set
its configuration:

#+BEGIN_SRC emacs-lisp
 (setq js-indent-level 2)
#+END_SRC

* Modeline

Let's use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp
  ;; run the following only once to install the fonts required by
  ;; doom-modeline. I didn't find an easy way to run this only once ...
  ; (my/install 'all-the-icons)
  ; (require 'all-the-icons)
  ; (all-the-icons-install-fonts)

  (use-package doom-modeline
    :config (doom-modeline-mode 1)
    :ensure t)
#+END_SRC

* Pdf-tools

PDF tools is tricky to get working on Mac. Make sure to execute the
following:

#+begin_src bash
brew tap dunn/emacs
brew install --HEAD pdf-tools
#+end_src

This recipe was taken from https://emacs.stackexchange.com/a/22591/28370:

#+begin_src emacs-lisp
;;; Install epdfinfo via 'brew install pdf-tools' and then install the
;;; pdf-tools elisp via the use-package below. To upgrade the epdfinfo
;;; server, just do 'brew upgrade pdf-tools' prior to upgrading to newest
;;; pdf-tools package using Emacs package system. If things get messed
;;; up, just do 'brew uninstall pdf-tools', wipe out the elpa
;;; pdf-tools package and reinstall both as at the start.
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
    '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
  (pdf-tools-install)
#+end_src
* Projectile

Let's configure [[https://github.com/bbatsov/projectile][projectile]] and it's ivy ui to make it easy to browse in
project:

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
      (setq projectile-project-search-path '("~/workspace"))
      ; (setq projectile-indexing-model 'native)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1)
    :ensure t)

  (use-package counsel-projectile
    :after (counsel projectile)
    :config
      (counsel-projectile-mode t)
    :ensure t)
#+END_SRC

* Protobuf

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :mode "\\.proto\\'"
    :ensure t)
#+END_SRC

* Thrift

#+BEGIN_SRC emacs-lisp
  (use-package thrift
    :mode "\\.thrift\\'"
    :ensure t)
#+END_SRC

* Python

Let's start by installing modes for python and python documentation:

#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :config
      (custom-set-variables
        '(python-indent-guess-indent-offset nil)
	'(python-indent-offset 4))
	(when (executable-find "ipython")
	  (setq python-shell-interpreter "ipython"
                python-shell-interpreter-args "--simple-prompt -i")))

  (use-package flycheck-pyflakes
    :after (python flycheck)
    :ensure t)

  (use-package python-docstring
    :hook ((python-mode . python-docstring-mode))
    :ensure t)

  (use-package python-black
    :after python
    :ensure t
    :hook ((python-mode . python-black-on-save-mode)))
#+END_SRC

** Poetry

Configure [[https://github.com/galaunay/poetry.el][poetry.el]]:

#+BEGIN_SRC emacs-lisp
  (use-package poetry
    :ensure t)
#+END_SRC

* Scala

Add support for scala:

#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :mode "\\.scala\\'"
    :ensure t)
#+END_SRC

* Sparql

Add support for sparql:

#+BEGIN_SRC emacs-lisp :results silent output
  (use-package sparql-mode
    :mode "\\.sparql\\'"
    :ensure t)
#+END_SRC

* TeX

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :mode "\\.tex\\'"
    :ensure t)
  (my/install 'auctex)
#+END_SRC

* XML

XML is still useful sometimes, let's set us up for these cases:

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete-nxml
    :mode "\\.xml\\'"
    :config
    ;; Keystroke to popup help about something at point.
    (setq auto-complete-nxml-popup-help-key "C-:")
    ;; Keystroke to toggle on/off automatic completion.
    (setq auto-complete-nxml-toggle-automatic-key "C-c C-t")
    :ensure t)

  (use-package rnc-mode
    :mode "\\.rnc\\'"
    :ensure t)
#+END_SRC

* Whitespaces

Nobody likes trailing whitespaces, let's just remove them:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)

    :bind (("C-c l" . org-store-link)
	   ("C-c c" . org-capture)
	   ("C-c a" . org-agenda)
	   ("C-c b" . org-iswitchb)
	   ("C-c C-w" . org-refile)
	   ("C-c j" . org-clock-goto)
	   ("C-c C-x C-o" . org-clock-out))

    :config
      (setq org-todo-keywords '((sequence
      "TODO(t!)" "IN-PROGRESS(p!)" "BLOCKED(b@!)"
      "|" "DONE(d!)" "DELEGATED(g@!)" "CANCELLED(c@!)")))

      ;; Capture timestamp when tasks are done
      (setq org-log-done t)

      ;; Make sure we don't kill the whole subtree when killing folded hearders
      (setq org-ctrl-k-protect-subtree t)

      ;; Align tags in the headline
      (setq org-tags-column -80)

      ;; Prettify code blocks
      (setq org-src-fontify-natively t)

      ;; configure org-capture
      (setq org-capture-templates
	'(("b" "Backlog an action item." entry (file+headline "~/Documents/today.org" "Backlog")
	   "* TODO %?\n  %i")))

      ;; use python3 by default
      (setq org-babel-python-command "python3")

      (org-babel-do-load-languages 'org-babel-load-languages
	'((emacs-lisp t)
	  (python . t)
	  (shell . t)
	  (sparql . t)))

  :init
    (add-hook 'org-mode-hook #'auto-fill-mode))
#+END_SRC

** ivy-bibtex

[[https://github.com/tmalsburg/helm-bibtex][ivy-bibtex]] supports searching quickly through a bibliography and
managing reading notes:

#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :after ivy
    :config
      (setq bibtex-completion-bibliography "~/org-roam/bibliography.bib")
      (setq bibtex-completion-library-path "~/org-roam/pdfs")
      (setq bibtex-completion-notes-path "~/org-roam")

      (setq ivy-re-builders-alist
	    '((ivy-bibtex . ivy--regex-ignore-order)
	      (t . ivy--regex-plus)))

      ;; Default template for notes. This template is compatible with
      ;; both org-roam and org-noter.
      (setq bibtex-completion-notes-template-multiple-files
	(concat
	  "#+TITLE: ${=key=}: ${title}\n"
	  "#+ROAM_KEY: cite:${=key=}\n"
	  "\n"
	  "* ${title}\n"
	  ":PROPERTIES:\n"
	  ":Custom_ID: ${=key=}\n"
	  ":NOTER_DOCUMENT: pdfs/${=key=}.pdf\n"
	  ":AUTHOR: ${author-abbrev}\n"
	  ":JOURNAL: ${journaltitle}\n"
	  ":DATE: ${date}\n"
	  ":YEAR: ${year}\n"
	  ":DOI: ${doi}\n"
	  ":URL: ${url}\n"
	  ":END:\n\n"))
    :ensure t)
#+end_src

With this configuration, ivy-bibtex is both compatible with org-noter
(via the =NOTER_DOCUMENT= property) and org-roam (via the =ROAM_KEY=
attribute).

This configuration is greatly inspired by https://rgoswami.me/posts/org-note-workflow/.

** org-ref

[[https://github.com/jkitchin/org-ref][org-ref]] makes it possible to cite publication using ~cite:key~ where
the key is read from a bibtex file. We configure it in pair with
~ivy-bibtex~

#+begin_src emacs-lisp
    (use-package org-ref
	:after ivy-bibtex
	:config
	(setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-ivy-bibtex)
	(setq org-ref-default-bibliography (list bibtex-completion-bibliography))
	(setq org-ref-pdf-directory "~/org-roam/pdfs")
	(require 'org-ref-arxiv))
#+end_src

Later, I will figure out how to configure org-ref-arxiv to download
pdf and bib reference from arxiv.org.

** ox-hugo

[[https://ox-hugo.scripter.co/][ox-hugo]] is an org-mode exporter allowing to blog with the [[https://gohugo.io][Hugo]]
platform in org-mode.

#+BEGIN_SRC emacs-lisp :results silent
  (use-package ox-hugo
    :after ox
    :ensure t)
#+END_SRC

** org-noter

[[https://github.com/weirdNox/org-noter][org-noter]] allows us to take note about PDF documents directly in emacs:

#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :after org
    :ensure t)
#+END_SRC

** org-roam

[[https://www.orgroam.com][org-roam]] is a knowledge management system built on top of org-mode:

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n f" . org-roam-find-file)
		 ("C-c n g" . org-roam-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert))
		(("C-c n I" . org-roam-insert-immediate)))
    :config
      (setq org-roam-directory "~/org-roam")
    :hook
    (after-init . org-roam-mode)
    :ensure t)
#+END_SRC

#+RESULTS:
: t

** Appearance

First, let's start by configuring the appearance of top level items:

#+BEGIN_SRC emacs-lisp
  ;; let's replace the stars with actual bullets
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :ensure t)
#+END_SRC

Make sure to run =M-x all-the-icons-install-fonts= at least once on
your system if the icons do not render well.

* Epilogue

** Custom values
Let's store custom values in a dedicated file:

#+BEGIN_SRC emacs-lisp
 (setq custom-file "~/.emacs.d/custom.el")
 (load custom-file)
#+END_SRC
