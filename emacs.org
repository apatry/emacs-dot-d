#+TITLE: A litterate programming approach to customize emacs
#+AUTHOR: Alex Patry
#+EMAIL: alex@nlpfu.com

* Introduction

This file is used to customize emacs to my needs. The pattern is to
add one section per type of configuration and then make sure that
all modules and configuration are defined in it.

The organization of this file is greatly inspired from Joost
Diepenmaat and the code he shared at
https://github.com/joodie/emacs-literal-config.

If you want to use this structure yourself, the easiest way to get
started is probably to clone this repository and move it at
=~/.emacs.d=. Make sure that no file is named =~/.emacs= as it would
be used instead of =~/.emacs.d/init.el= when emacs is starting.

* Prologue

Before we start actually configuring our environment, let's define
some utilities that will help us get organized:

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))

    ;; Add all the package repositories that we want to use.
    (add-to-list 'package-archives
		 (cons "melpa" (concat proto "://melpa.org/packages/")) t))

  ;; Initialize the package module, this must be after 'package-archives
  ;; has been set
  (package-initialize)

  ;; Reloading the list of packages takes time, we will do it at most
  ;; once. This variable will be true if the list has already be
  ;; reloaded.
  (setq my/package-refreshed nil)

  ;; Install a package if it is not already installed.
  (defun my/install (package)
    (unless (package-installed-p package)
      (unless my/package-refreshed
	(package-refresh-contents)
	(setq my/package-refreshed t))
      (package-install package)))
#+END_SRC

#+RESULTS:
: my/install

* Startup configuration

By default, emacs show a welcome screen. While it can be useful the
first time we start emacs, it gets old very fast. Let's disable it:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

Also, emacs comes with a toolbar that is next to useless, let's
reclaim back this space:

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
    (tool-bar-mode -1))
#+END_SRC

* Custom commands

#+BEGIN_SRC emacs-lisp :results silent output
  (defun dot-emacs ()
    "Shortcut to open this file. I often tweak my emacs config,
  this short cut makes it easier to get here."
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
#+END_SRC

* Flycheck Global

We want to enable flycheck by default:

#+BEGIN_SRC emacs-lisp
  (my/install 'flycheck)
  (global-flycheck-mode)
#+END_SRC

More info at https://www.flycheck.org/en/latest/

* Backups

By default, emacs save backup files in the same directory as the files
we are editing. Instead of adding files everywhere, let's use a
dedicated directory for these backups:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
#+END_SRC

Let's also have more backup per file as suggested [[http://stackoverflow.com/a/151946][here]]:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC

* Color theme

I will give [[https://github.com/hlissner/emacs-doom-themes#features][doom-themes]] a try:

#+BEGIN_SRC emacs-lisp
  (my/install 'doom-themes)
  (require 'doom-themes)

  (load-theme 'doom-gruvbox t)

  ;; additional org support, yay!
  (doom-themes-org-config)
#+END_SRC

* Git

Let's use magit to deal with git command from within emacs:

#+BEGIN_SRC emacs-lisp
  (my/install 'magit)
  (require 'magit)
#+END_SRC

We will also add git modification into the [[https://github.com/syohex/emacs-git-gutter][gutter]]:

#+BEGIN_SRC emacs-lisp
  (my/install 'git-gutter)
  (require 'git-gutter)

  ; enable git-gutter everywhere by default
  (global-git-gutter-mode +1)
#+END_SRC

* Graphviz

#+BEGIN_SRC emacs-lisp
  (my/install 'graphviz-dot-mode)
#+END_SRC

* Groovy

Add support for groovy files:

#+BEGIN_SRC emacs-lisp
  (my/install 'groovy-mode)

  (require 'cl)
  (require 'groovy-mode)
#+END_SRC

* Helm

[[https://github.com/emacs-helm/helm/wiki#install][Helm]] is an auto-completion package for emacs. I am not familiar with
it yet, so this config might be suboptimal:

#+BEGIN_SRC emacs-lisp
(my/install 'helm)
(require 'helm-config)

;; this might be disruptive, let's see how it goes
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)

(helm-mode 1)
#+END_SRC

* Markdown

Add support for markdown

#+BEGIN_SRC emacs-lisp
  (my/install 'markdown-mode)
#+END_SRC

* Nix

Let's add support for nix, a package manager.

#+BEGIN_SRC emacs-lisp :results silent
  (my/install 'nix-mode)
  (require 'nix-mode)

  ;; enable nix mode for .nix files
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+END_SRC

#+RESULTS:

* Pig

Use [[https://github.com/motus/pig-mode][pig-mode]] with indent of 2:

#+BEGIN_SRC emacs-lisp
  (my/install 'pig-mode)

  (setq pig-indent-level 2)
#+END_SRC

* Projectile

Use [[https://github.com/bbatsov/projectile][projectile]] to search for files:

#+BEGIN_SRC emacs-lisp
  (my/install 'projectile)
  (my/install 'helm-projectile)

  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (helm-projectile)
  (setq projectile-project-root-files "~/workspace")
#+END_SRC

* Javascript

Javascript mode is shipped by default with emacs, we just want to set
its configuration:

#+BEGIN_SRC emacs-lisp
 (setq js-indent-level 2)
#+END_SRC

* Modeline

Let's use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp
  ;; run the following only once to install the fonts required by
  ;; doom-modeline. I didn't find an easy way to run this only once ...
  ; (my/install 'all-the-icons)
  ; (require 'all-the-icons)
  ; (all-the-icons-install-fonts)

  (my/install 'doom-modeline)
  (require 'doom-modeline)

  (doom-modeline-mode 1)
#+END_SRC

* Protobuf

#+BEGIN_SRC emacs-lisp
  (my/install 'protobuf-mode)
#+END_SRC

* Thrift

#+BEGIN_SRC emacs-lisp
  (my/install 'thrift)
#+END_SRC

* Python

Let's start by installing modes for python and python documentation:

#+BEGIN_SRC emacs-lisp
  (my/install 'python)
  (my/install 'flycheck-pyflakes)
#+END_SRC

We will use the current file indentation format and default to 2
spaces for new files:

#+BEGIN_SRC elisp :results silent
  (custom-set-variables
   '(python-indent-guess-indent-offset nil)
   '(python-indent-offset 2))
#+END_SRC

This will help generating our docstring:

#+BEGIN_SRC emacs-lisp
  (my/install 'python-docstring)
  (python-docstring-install)
#+END_SRC

This will help us use ipython as our shell instead of python:

#+BEGIN_SRC emacs-lisp
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i"))
#+END_SRC

* Scala

Add support for scala:

#+BEGIN_SRC emacs-lisp
  (my/install 'scala-mode)
#+END_SRC

* Sparql

Add support for sparql:

#+BEGIN_SRC emacs-lisp :results silent output
  (my/install 'sparql-mode)
  (require 'sparql-mode)
#+END_SRC

* TeX

#+BEGIN+_SRC emacs-list
  (my/install 'auctex)
#+END_SRC

* XML

XML is still useful sometimes, let's set us up for these cases:

#+BEGIN_SRC emacs-lisp
  (my/install 'auto-complete-nxml)
  (my/install 'rnc-mode)

  ;; Keystroke to popup help about something at point.
  (setq auto-complete-nxml-popup-help-key "C-:")

  ;; Keystroke to toggle on/off automatic completion.
  (setq auto-complete-nxml-toggle-automatic-key "C-c C-t")
#+END_SRC

* Whitespaces

Nobody likes trailing whitespaces, let's just remove them:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Org-mode
** Key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

** Workflow

Let's set the workflow for tasks:

#+BEGIN_SRC emacs-lisp
 (setq org-todo-keywords
       '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "|" "DONE" "DELEGATED")))

 ;; Capture timestamp when tasks are done
 (setq org-log-done t)
#+END_SRC

** org-babel

Let's activate the language we care about:

#+BEGIN_SRC emacs-lisp :results silent
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp t)
       (python . t)
       (shell . t)
       (sparql . t)))
#+END_SRC

** ox-hugo

[[https://ox-hugo.scripter.co/][ox-hugo]] is an org-mode exporter allowing to blog with the [[https://gohugo.io][Hugo]]
platform in org-mode.

#+BEGIN_SRC emacs-lisp :results silent
  (my/install 'ox-hugo)
  (with-eval-after-load 'ox
    (require 'ox-hugo))
#+END_SRC

** Appearance

First, let's start by configuring the appearance of top level items:

#+BEGIN_SRC emacs-lisp
  ;; let's replace the stars with actual bullets
  (my/install 'org-bullets)
  (require 'org-bullets)

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Align tags in the headline
  (setq org-tags-column t)

  ;; Prettify code blocks
  (setq org-src-fontify-natively t)
#+END_SRC

** Miscellaneous

#+BEGIN_SRC emacs-lisp
 ;; Make sure we don't kill the whole subtree when killing folded hearders
 (setq org-ctrl-k-protect-subtree t)
#+END_SRC

* Epilogue

** Custom values
Let's store custom values in a dedicated file:

#+BEGIN_SRC emacs-lisp
 (setq custom-file "~/.emacs.d/custom.el")
 (load custom-file)
#+END_SRC
