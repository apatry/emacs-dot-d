#+TITLE: A litterate programming approach to customize emacs
#+AUTHOR: Alex Patry
#+EMAIL: alex@nlpfu.com

* Introduction

This file is used to customize emacs to my needs. The pattern is to
add one section per type of configuration and then make sure that
all modules and configuration are defined in it.

The organization of this file is greatly inspired from Joost
Diepenmaat and the code he shared at
https://github.com/joodie/emacs-literal-config.

If you want to use this structure yourself, the easiest way to get
started is probably to clone this repository and move it at
=~/.emacs.d=. Make sure that no file is named =~/.emacs= as it would
be used instead of =~/.emacs.d/init.el= when emacs is starting.

* Prologue

Before we start actually configuring our environment, let's define
some utilities that will help us get organized:

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)

  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))

    ;; Add all the package repositories that we want to use.
    (add-to-list 'package-archives
		 (cons "melpa" (concat proto "://melpa.org/packages/")) t))

  ;; Initialize the package module, this must be after 'package-archives
  ;; has been set
  (when (< emacs-major-version 27) (package-initialize))

  ;; Reloading the list of packages takes time, we will do it at most
  ;; once. This variable will be true if the list has already be
  ;; reloaded.
  (setq my/package-refreshed nil)

  ;; Install a package if it is not already installed.
  (defun my/install (package)
    (unless (package-installed-p package)
      (unless my/package-refreshed
	(package-refresh-contents)
	(setq my/package-refreshed t))
      (package-install package)))
#+END_SRC

#+RESULTS:
: my/install

And let's install [[https://github.com/radian-software/straight.el][straight.el]]:

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Use Package

At first, I was using =my/install= for all my packages. I decided to
test drive =use-package= and see how it could make things
better. Before migrating to it, my startup time was:

#+BEGIN_VERBATIM
time emacs -l .emacs.d/init.el  -batch --eval '(message "Hello, world!")'
Loading /etc/emacs/site-start.d/00debian.el (source)...
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading debian-ispell...
Loading /var/cache/dictionaries-common/emacsen-ispell-default.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...
Tangled 35 code blocks from emacs.org
Loading /home/alex/.emacs.d/emacs.el (source)...
Loading /home/alex/.emacs.d/custom.el (source)...
Loaded /home/alex/.emacs.d/emacs.el
Hello, world!
emacs -l .emacs.d/init.el -batch --eval '(message "Hello, world!")'  1.12s user 0.06s system 99% cpu 1.188 total
#+END_VERBATIM

After the migration, it was:

#+BEGIN_VERBATIM
time emacs -l .emacs.d/init.el  -batch --eval '(message "Hello, world!")'
Loading /etc/emacs/site-start.d/00debian.el (source)...
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading debian-ispell...
Loading /var/cache/dictionaries-common/emacsen-ispell-default.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...
Loading /home/alex/.emacs.d/emacs.el (source)...
Loading /home/alex/.emacs.d/custom.el (source)...
Loaded ~/.emacs.d/emacs.el
Hello, world!
emacs -l .emacs.d/init.el -batch --eval '(message "Hello, world!")'  1.09s user 0.03s system 99% cpu 1.124 total
#+END_VERBATIM

#+BEGIN_SRC emacs-lisp
  (my/install 'use-package)

  ;; This is needed to run the compiled version of this code.
  ;; See https://github.com/jwiegley/use-package/issues/436
  (require 'use-package)

  ;; uncomment the following lines to gather statistics about package load time
  ;; run 'use-package-report to see statistics
  ; (setq use-package-compute-statistics t)

  ;; make sure packages are updated when new versions are available
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)

    :ensure t)
#+END_SRC

#+RESULTS:
: t

* Startup time profiling

Over time, my startup configuration gets slower, it is useful to profile the bottlenecks when it happens. The package [[https://github.com/jschaf/esup][esup]] can help with the =esup= command.

#+begin_src emacs-lisp
(use-package esup
  :commands esup
  :config
   (setq esup-depth 0) ;; See https://github.com/jschaf/esup/issues/54#issuecomment-700269238
   (setq esup-user-init-file "~/.emacs.d/emacs.el")
  :ensure t)
#+end_src

* Startup configuration

By default, emacs show a welcome screen. While it can be useful the
first time we start emacs, it gets old very fast. Let's disable it:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

Also, emacs comes with a toolbar that is next to useless, let's
reclaim back this space:

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
    (tool-bar-mode -1))
#+END_SRC

We will also pick-up our environment variable from the shell instead of from whatever Mac OSX gives us:

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config (exec-path-from-shell-initialize)
    :demand t
    :ensure t)
#+end_src

* Built-in Configurations

Refresh buffers when files are changed on disk:

#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

* Custom commands

#+BEGIN_SRC emacs-lisp :results silent output
  (defun dot-emacs ()
    "Shortcut to open this file. I often tweak my emacs config,
  this short cut makes it easier to get here."
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
#+END_SRC

* Flycheck

Flycheck checks the syntax in many programming language and add visual
markers when it detects an error. We want to enable it by default:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 2
    :config (global-flycheck-mode)
    :ensure t)
#+END_SRC

More info at https://www.flycheck.org/en/latest/

* Backups

By default, emacs save backup files in the same directory as the files
we are editing. Instead of adding files everywhere, let's use a
dedicated directory for these backups:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
#+END_SRC

Let's also have more backup per file as suggested [[http://stackoverflow.com/a/151946][here]]:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+END_SRC

* Clojure

For clojure we need clojure-mode to take care of code editing and cider to manage our REPL:

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t)

  (use-package cider
    :after clojure-mode
    :hook (clojure-mode . cider-mode)
    :ensure t)
#+end_src

* Color theme

I will give [[https://github.com/hlissner/emacs-doom-themes#features][doom-themes]] a try:

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
      (load-theme 'doom-gruvbox t)
      (doom-themes-org-config)
    :ensure t)
#+END_SRC

* Avy

Setup [[https://github.com/abo-abo/avy][avy]] to quickly jump anywhere in the screen:

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-:") 'avy-goto-char))
#+end_src

* Company

Setup auto-complete powered by company-mode:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :ensure t)
#+END_SRC

* Docker

Let's configure a functional setup to edit dockerfiles:

#+begin_src emacs-lisp
  (use-package
    dockerfile-mode
    :mode "Dockerfile"
    :ensure t)
#+end_src

* Elisp

  Configuration for elisp programming. First we start by configuring [[https://github.com/abo-abo/lispy][lispy]] to make sure our parenthesis stay balanced:

  #+begin_src emacs-lisp
    (use-package lispy
      :hook ((clojure-mode . lispy-mode)
	     (emacs-lisp-mode . lispy-mode))
      :ensure t)

    (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  #+end_src

* Git

Let's use magit to deal with git command from within emacs:

#+BEGIN_SRC emacs-lisp
  (use-package magit
   :bind ("C-x g" . magit-status)
   :commands magit-status
   :ensure t)
#+END_SRC

Note that we load =magit= only when =magit-status= is called. This is
because =magit= is the longest package to load at startup. Doing so
improved my startup time by about 25%.

We will also add git modification into the [[https://github.com/syohex/emacs-git-gutter][gutter]]:

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config (global-git-gutter-mode +1)
    :ensure t)
#+END_SRC

* Github Copilot

From [[https://github.com/copilot-emacs/copilot.el][this documentation]]:

#+begin_src emacs-lisp
  ;; dependencies for copilot
  (use-package dash :ensure t)
  (use-package editorconfig :ensure t)
  (use-package f :ensure t)
  (use-package s :ensure t)

  (use-package copilot
    :after (dash editorconfig f s)
    :bind (("C-c s a" . copilot-accept-completion)
	   ("C-c s s" . copilot-complete)
	   ("C-c s n" . copilot-next-completion)
	   ("C-c s p" . copilot-previous-completion)
	   ("C-c s g" . copilot-clear-overlay)
	   ("C-c s w" . copilot-accept-completion-by-word)
	   ("C-c s p" . copilot-accept-completion-by-paragraph)
	   ("C-c s l" . copilot-accept-completion-by-line)
	   ("C-c s m" . copilot-mode))

    :hook (prog-mode . copilot-mode)
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :ensure t)
#+end_src

And enable the use of copilot to chat with the code base:

#+begin_src emacs-lisp
  (use-package copilot-chat
    :straight (:host github :repo "chep/copilot-chat.el" :files ("*.el"))
    :after (request shell-maker)
    :custom
    (copilot-chat-frontend 'shell-maker)
    :config
    (require 'copilot-chat-shell-maker)
    (push '(shell-maker . copilot-chat-shell-maker-init) copilot-chat-frontend-list)
    (copilot-chat-shell-maker-init))
#+end_src

* Gnuplot

Add a mode for gnuplot. Useful with org-babel:

#+begin_src emacs-lisp
  (use-package gnuplot-mode
    :mode "\\.gnuplot"
    :ensure t)

  (use-package gnuplot
    :ensure t)
#+end_src
* Graphviz

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :mode "\\.dot\\'"
    :ensure t)
#+END_SRC

* Groovy

Add support for groovy files:

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :mode "\\.groovy\\'\\|\\.gradle\\'"
    :config
      (setq groovy-indent-offset 2)
    :ensure t)
#+END_SRC

* Ivy

Ivy is an auto-completion framework for emacs. I am trying it out as a
replacement for helm. Let's see how it goes:

#+begin_src emacs-lisp
  (use-package ivy
    :config
      (setq ivy-use-virtual-buffers t)
      (ivy-mode +1)
    :ensure t)
#+end_src

** Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)

  (use-package ivy-hydra
    :after (ivy hydra)
    :ensure t)
#+end_src

#+RESULTS:

** Counsel

Counsel is the UI for ivy:

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :defer t
    :config
      (counsel-mode +1)
    :ensure t)
#+end_src

** ivy-explorer

Display ivy completions in a grid instead of a list.

#+begin_src emacs-lisp
  (use-package ivy-explorer
    :after counsel
    :config
      (ivy-explorer-mode 1)
    :ensure t)
#+end_src

* Julia

Configure emacs to code in Julia:

#+begin_src emacs-lisp
  (use-package julia-mode
    :mode "\\.jl\\'"
    :ensure t)

  (use-package julia-repl
    :hook (julia-mode . julia-repl-mode)
    :ensure t)
#+end_src

* Lsp

** Installing Requirements

#+BEGIN_SRC shell
  pip3 install python-language-server
  sudo npm i -g pyright
  sudo npm i -g bash-language-server
#+END_SRC

To update to the latest of some of these:

#+begin_src shell
  sudo npm update -g pyright
  sudo npm update -g bash-language-server
#+end_src

#+RESULTS:

** Installing the client

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((clojure-mode . lsp)
	   (javascript-mode . lsp)
	   (rustic-mode . lsp)
	   (scala-mode . lsp)
	   (sql-mode . lsp)
	   (typescript-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]build\\'")
    :ensure t)

  (define-minor-mode lsp-format-on-save-mode
    "Toggle calling lsp-format-buffer on file save."

    :init-value nil

    ;; this code is called when the mode is enabled
    ;; (lsp-format-on-save-mode will be defined) or disabled.
    (if lsp-format-on-save-mode
	(add-hook 'before-save-hook #'lsp-format-buffer)
      (remove-hook 'before-save-hook #'lsp-format-buffer)))

  (use-package lsp-java
    :hook (java-mode . (lambda () (lsp) (lsp-format-on-save-mode 1)))
    :config (setq lsp-java-format-settings-url (expand-file-name "~/.emacs.d/java-codestyle.xml"))
    :ensure t)

  (use-package lsp-julia
    :after julia-mode
    :hook (julia-mode . (lambda () (lsp) (lsp-format-on-save-mode 1)))
    :init (setq lsp-julia-default-environment "~/.julia/environments/v1.7")
    :ensure t)

  ;; see https://github.com/emacs-lsp/lsp-python-ms for details
  (use-package lsp-pyright
    :ensure t
    :mode "\\.py"
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :ensure t)

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol
    :ensure t)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :ensure t)

  (use-package which-key
    :config (which-key-mode)
    :ensure t)
#+END_SRC

#+RESULTS:

* Markdown

Add support for markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    :ensure t)
#+END_SRC

* Nix

Let's add support for nix, a package manager.

#+BEGIN_SRC emacs-lisp :results silent
  (use-package nix-mode
    :mode "\\.nix\\'"
    :ensure t)
#+END_SRC

#+RESULTS:

* Pig

Use [[https://github.com/motus/pig-mode][pig-mode]] with indent of 2:

#+BEGIN_SRC emacs-lisp
  (use-package pig-mode
    :config (setq pig-indent-level 2)
    :mode "\\.pig\\'"
    :ensure t)
#+END_SRC

* Java

Configure java formatting:

#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook
	    (lambda ()
	      (setq c-basic-offset 2
		    indent-tabs-mode nil
		    tab-width 2)))
#+END_SRC

* Javascript

Javascript mode is shipped by default with emacs, we just want to set
its configuration:

#+BEGIN_SRC emacs-lisp
 (setq js-indent-level 2)
#+END_SRC

* Jinja

Add support for jinja-mode:

#+begin_src emacs-lisp
(use-package jinja2-mode
  :mode "\\.jinja\\'"
  :ensure t)
#+end_src

* Mu4e

[[https://www.djcbsoftware.nl/code/mu/mu4e/][mu4e]] is a mode to read emails in emacs. My config relies on =mbsync=
to fetch emails. We assume that it has been setup properly. A good
starting point is available [[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][here]].

#+begin_src emacs-lisp
  (when (and (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
	     (file-directory-p "~/Maildir"))

    ;; we assume that mu and mu4e have been installed already using our
    ;; package manager (e.g. apt install mu4e)
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
    (require 'mu4e)

    (setq mu4e-contexts
	  `(,(make-mu4e-context
	      :name "fastmail"
	      :enter-func (lambda () (mu4e-message "Entering fastmail context"))
	      :leave-func (lambda () (mu4e-message "Leaving fastmail context"))
	      :match-func (lambda (msg)
			    (when msg
			      (string-match-p "^/fastmail/" (mu4e-message-field msg :maildir))))
	      :vars '((user-mail-address . "alex@nlpfu.com")
		      (user-full-name . "Alexandre Patry")

		      ;; configure mu4e imap directory
		      (mu4e-sent-folder . "/fastmail/Sent Items")
		      (mu4e-refile-folder . "/fastmail/Archive")
		      (mu4e-drafts-folder . "/fastmail/Drafts")
		      (mu4e-trash-folder . "/fastmail/Trash")

		      ;; mu4e shortcut (e.g. ji will jump to inbox)
		      (mu4e-maildir-shortcuts .
		       (("/fastmail/INBOX" . ?i)
			("/fastmail/Sent Items" . ?s)
			("/fastmail/Trash" . ?t)
			("/fastmail/Drafts". ?d)))

		      ;; set smtp server
		      (smtpmail-default-smtp-server . "smtp.fastmail.com")
		      (smtpmail-smtp-server . "smtp.fastmail.com")
		      (smtpmail-stream-type . starttls)
		      (smtpmail-smtp-service . 587)))

	    ,(make-mu4e-context
	      :name "gmail"
	      :enter-func (lambda () (mu4e-message "Entering gmail context"))
	      :leave-func (lambda () (mu4e-message "Leaving gmail context"))
	      :match-func (lambda (msg)
			    (when msg
			      (string-match-p "^/gmail/" (mu4e-message-field msg :maildir))))
	      :vars '((user-mail-address . "textjuicer@gmail.com")
		      (user-full-name . "Alexandre Patry")

		      ;; configure mu4e imap directory
		      (mu4e-sent-folder . "/gmail/[Gmail]/Messages envoy&AOk-s")
		      (mu4e-drafts-folder . "/gmail/[Gmail]/Brouillons")
		      (mu4e-trash-folder . "/gmail/[Gmail]/Corbeille")

		      ;; mu4e shortcut (e.g. ji will jump to inbox)
		      (mu4e-maildir-shortcuts .
		       (("/gmail/INBOX" . ?i)
			("/gmail/[Gmail]/Messages envoy&AOk-s" . ?s)
			("/gmail/[Gmail]/Corbeille" . ?t)
			("/gmail/[Gmain]/Brouillons". ?d)))

		      ;; set smtp server
		      (smtpmail-smtp-server . "smtp.gmail.com")
		      (smtpmail-stream-type . starttls)
		      (smtpmail-smtp-service . 587)))))

    (setq mail-user-agent 'mu4e-user-agent)
    (setq message-send-mail-function 'smtpmail-send-it)

    (setq
     ;; location for downloaded attachments
     mu4e-attachments-dir "~/Downloads"

     ;; command to update emails every 5 minutes (300 seconds)
     mu4e-get-mail-command "mbsync -a"
     mu4e-update-interval 300

     ;; rename filse when moving (required by mbsync)
     mu4e-change-filenames-when-moving t

     ;; faster re-indexing of emails
     mu4e-index-cleanup nil
     mu4e-index-lazy-check t

     ;; let the recipient adjust the text width
     mu4e-compose-format-flowed t

     ;; ui
     mu4e-view-show-images t)

    ;; configure imagemagick to handle images
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))


    ;; Allows to view email in browser
    (add-to-list 'mu4e-view-actions
		 '("browser view" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions
		 '("xwidget" . mu4e-action-view-with-xwidget) t)

    ;; run mu4e in the background at startup
    (mu4e-context-switch nil "fastmail")
    (mu4e t))
#+end_src

#+RESULTS:
: 587

* Modeline

Let's use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp
  ;; run the following only once to install the fonts required by
  ;; doom-modeline. I didn't find an easy way to run this only once ...
  ; (my/install 'all-the-icons)
  ; (require 'all-the-icons)
  ; (all-the-icons-install-fonts)

  (use-package doom-modeline
    :defer 1
    :config (doom-modeline-mode 1)
    :ensure t)
#+END_SRC

* Org-ql

[[https://github.com/alphapapa/org-ql][Org-ql]] offers a way to slice and dice my notes:

#+begin_src emacs-lisp
  (use-package org-ql
    :ensure t)
#+end_src

* Pdf-tools

PDF tools is tricky to get working on Mac. Make sure to execute the
following:

#+begin_src bash
brew tap dunn/emacs
brew install --HEAD pdf-tools
#+end_src

#+RESULTS:

This recipe was taken from https://emacs.stackexchange.com/a/22591/28370:

#+begin_src emacs-lisp
  ;;; Install epdfinfo via 'brew install pdf-tools' and then install the
  ;;; pdf-tools elisp via the use-package below. To upgrade the epdfinfo
  ;;; server, just do 'brew upgrade pdf-tools' prior to upgrading to newest
  ;;; pdf-tools package using Emacs package system. If things get messed
  ;;; up, just do 'brew uninstall pdf-tools', wipe out the elpa
  ;;; pdf-tools package and reinstall both as at the start.
  (use-package pdf-tools
    :ensure t
    :magic ("%PDF" . pdf-view-mode)
    :custom
    ;; (pdf-view-use-scaling t "Enable scaling of images for higher resolution screens.")
    (pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    :config
    (setq pdf-tools-handle-upgrades nil) ; Use brew upgrade pdf-tools instead.
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    ;; (defun frame-scale-factor ()
    ;;   "Scale factor to use when rendering PDF. Without it, rendering is pixeleted on high-resolution screen."
    ;;   4)
    (pdf-tools-install :no-query))
#+end_src

* Plantuml

Once plantuml is downloaded under =~/.emacs.d/plantuml.jar=, it can be used in org-babel:

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :after org
    :ensure t
    :config
      (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  )
#+end_src

* Projectile

Let's configure [[https://github.com/bbatsov/projectile][projectile]] and it's ivy ui to make it easy to browse in
project:

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
      (setq projectile-project-search-path '("~/workspace"))
    :init
      (projectile-mode +1)
    :bind-keymap
      ("C-c p" . projectile-command-map)
    :ensure t)

  (use-package counsel-projectile
    :after (counsel projectile)
    :config
      (counsel-projectile-mode t)
    :ensure t)
#+END_SRC

* Protobuf

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :mode "\\.proto\\'"
    :ensure t)
#+END_SRC

* Thrift

#+BEGIN_SRC emacs-lisp
  (use-package thrift
    :mode "\\.thrift\\'"
    :ensure t)
#+END_SRC

* Python

Let's start by installing modes for python and python documentation:

#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :config
    (setq
     python-indent-guess-indent-offset nil
     python-indent-offset 4)
    (when (executable-find "ipython3")
      (setq python-shell-interpreter "ipython3"
	    python-shell-interpreter-args "-i --simple-prompt --gui=tk ")))

  (use-package python-docstring
    :hook ((python-mode . python-docstring-mode))
    :ensure t)

  (use-package python-black
    :after python
    :ensure t
    :hook ((python-mode . python-black-on-save-mode)))

  (use-package py-isort
    :after python
    :ensure t
    :hook (python-mode . py-isort-before-save)
    :config
    (setq py-isort-options '("--profile=black")))
#+END_SRC

#+RESULTS:
| py-isort-before-save | py-isort-enable-on-save | python-black-on-save-mode | python-docstring-mode | doom-modeline-env-setup-python | (lambda nil (require (quote lsp-python-ms)) (lsp)) |

** Poetry

Configure [[https://github.com/galaunay/poetry.el][poetry.el]]:

#+BEGIN_SRC emacs-lisp
  (use-package poetry
    :commands poetry
    :ensure t)
#+END_SRC

* Rainbow Delimiters

  Let's add some color into our parenthesis and brackets:

  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
     :init
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
     :ensure t)
  #+end_src

* Rust

Rust configuration inspired from [[https://robert.kra.hn/posts/rust-emacs-setup/][this article]]:

#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :after lsp-mode
    :bind (:map rustic-mode-map
		("M-j" . lsp-ui-imenu)
		("M-?" . lsp-find-references)
		("C-c C-c l" . flycheck-list-errors)
		("C-c C-c a" . lsp-execute-code-action)
		("C-c C-c r" . lsp-rename)
		("C-c C-c q" . lsp-workspace-restart)
		("C-c C-c Q" . lsp-workspace-shutdown)
		("C-c C-c s" . lsp-rust-analyzer-status)
		("C-c C-c e" . lsp-rust-analyzer-expand-macro)
		("C-c C-c d" . dap-hydra)
		("C-c C-c h" . lsp-ui-doc-glance))
    :config
    ;; format buffer on save
    (lsp-format-on-save-mode 1)

    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; This controls the overlays that display type and other hints inline. Enable
    ;; / disable as you prefer. Well require a `lsp-workspace-restart' to have an
    ;; effect on open projects.
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil))
#+end_src

Configure [[https://github.com/grafov/rust-playground][rust-playground]], a mode to create ephemeral rust snippets:

#+begin_src emacs-lisp
  (use-package rust-playground
      :ensure t)
#+end_src

* Scala

Add support for scala:

#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :mode "\\.scala\\'"
    :ensure t)
#+END_SRC

* Sparql

Add support for sparql:

#+BEGIN_SRC emacs-lisp :results silent output
  (use-package sparql-mode
    :mode "\\.sparql\\'"
    :ensure t)
#+END_SRC

* TeX

#+BEGIN_SRC emacs-lisp
  (use-package latex
    :bind (:map LaTeX-mode-map ("<tab>" . org-cycle))
    :ensure auctex)

  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode)
    :ensure t)
#+END_SRC

* Text

Configuration for editing text:

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (visual-line-mode . visual-fill-column-mode)
    :config (setq fill-column 120)
    :ensure t)

  (add-hook 'text-mode-hook #'visual-line-mode)
#+end_src

#+RESULTS:

* TOML

#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t)
#+end_src
* Typescript

Inspired by [[https://willschenk.com/howto/2021/setting_up_emacs_for_typescript_development/][this post]]:

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :ensure t)
#+end_src


* XML

XML is still useful sometimes, let's set us up for these cases:

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete-nxml
    :mode "\\.xml\\'"
    :config
    ;; Keystroke to popup help about something at point.
    (setq auto-complete-nxml-popup-help-key "C-:")
    ;; Keystroke to toggle on/off automatic completion.
    (setq auto-complete-nxml-toggle-automatic-key "C-c C-t")
    :ensure t)

  (use-package rnc-mode
    :mode "\\.rnc\\'"
    :ensure t)
#+END_SRC

* Whitespaces

Nobody likes trailing whitespaces, let's just remove them:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)

    :bind (("C-c l" . org-store-link)
	   ("C-c c" . org-capture)
	   ("C-c a" . org-agenda)
	   ("C-c b" . org-switchb)
	   ("C-c j" . org-journal-new-entry)
	   ("C-c C-w" . org-refile)
	   ("C-c C-x C-o" . org-clock-out))

    :hook
    ;; update inline image after code-blocks
    ((org-babel-after-execute . org-redisplay-inline-images)
     (org-mode . visual-line-mode))

    :config
    (setq org-todo-keywords '((sequence
			       "TODO(t!)" "IN-PROGRESS(p!)" "BLOCKED(b@!)"
			       "|" "DONE(d!)" "DELEGATED(g@!)" "CANCELLED(c@!)")))

    ;; Capture timestamp when tasks are done
    (setq org-log-done t)

    ;; Make sure we don't kill the whole subtree when killing folded hearders
    (setq org-ctrl-k-protect-subtree t)

    ;; Align tags in the headline
    (setq org-tags-column -80)

    ;; Prettify code blocks
    (setq org-src-fontify-natively t)

    ;; Do not write section number when exporting documents
    (setq org-export-with-section-numbers nil)

    ;; configure org-capture
    (setq org-capture-templates
	  '(("b" "Backlog an action item." entry (file+headline "~/Documents/today.org" "Backlog")
	     "* TODO %?\n  %i")
	    ("j" "Journal entry." plain (function org-journal-find-location)
	     "** Mental Health\n*** I am grateful for\n*** What would make today great?\n*** Daily affirmation\n*** Three amazing things that happened yesterday\n*** How could I have made yesterday even better in less than 5 minutes"
	     :jump-to-captured t :immediate-finish t)))

    ;; use python3 by default
    (setq org-babel-python-command "python3"
	  org-babel-clojure-backend 'cider)

    (org-babel-do-load-languages 'org-babel-load-languages
				 '((clojure . t)
				   (dot . t)
				   (emacs-lisp . t)
				   (gnuplot . t)
				   (plantuml . t )
				   (python . t)
				   (shell . t)
				   (sparql . t)
				   (sqlite . t))))
#+END_SRC

** epresent

[[https://github.com/eschulte/epresent][epresent]] can run org files in presentation mode using the ~epresent-run~ command:

#+begin_src emacs-lisp :output nil
(use-package epresent
  :after org
  :ensure t)
#+end_src
** ivy-bibtex

[[https://github.com/tmalsburg/helm-bibtex][ivy-bibtex]] supports searching quickly through a bibliography and
managing reading notes:

#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :after ivy
    :commands ivy-bibtex
    :config
    (setq bibtex-completion-bibliography '("~/org-roam/bibliography.bib"))
    (setq bibtex-completion-library-path '("~/org-roam/pdfs/"))
    (setq bibtex-completion-notes-path "~/org-roam/")

    (setq ivy-re-builders-alist
	  '((ivy-bibtex . ivy--regex-ignore-order)
	    (t . ivy--regex-plus)))

    ;; Default template for notes. This template is compatible with
    ;; both org-roam and org-noter.
    (setq bibtex-completion-notes-template-multiple-files
	  (concat
	   "#+TITLE: ${=key=}: ${title}\n"
	   "#+ROAM_KEY: cite:${=key=}\n"
	   "\n"
	   "* ${title}\n"
	   ":PROPERTIES:\n"
	   ":Custom_ID: ${=key=}\n"
	   ":NOTER_DOCUMENT: pdfs/${=key=}.pdf\n"
	   ":AUTHOR: ${author-abbrev}\n"
	   ":JOURNAL: ${journaltitle}\n"
	   ":DATE: ${date}\n"
	   ":YEAR: ${year}\n"
	   ":DOI: ${doi}\n"
	   ":URL: ${url}\n"
	   ":END:\n\n"))
    :ensure t)
#+end_src

With this configuration, ivy-bibtex is both compatible with org-noter
(via the =NOTER_DOCUMENT= property) and org-roam (via the =ROAM_KEY=
attribute).

This configuration is greatly inspired by https://rgoswami.me/posts/org-note-workflow/.

** org-ref

[[https://github.com/jkitchin/org-ref][org-ref]] makes it possible to cite publication using ~cite:key~ where
the key is read from a bibtex file. We configure it in pair with
~ivy-bibtex~

#+begin_src emacs-lisp
  ;; async is required to download pdfs
  (use-package async
    :ensure t)

  (use-package org-ref
    :ensure t
    :after (async ivy-bibtex)
    :config

    ;; (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-ivy-bibtex)

    ;; make sure to support bibtex
    (setq  org-latex-pdf-process
	   '("latexmk -shell-escape -bibtex -pdf %f"))
    (require 'org-ref-arxiv))
#+end_src

Later, I will figure out how to configure org-ref-arxiv to download
pdf and bib reference from arxiv.org.

** ox-hugo

[[https://ox-hugo.scripter.co/][ox-hugo]] is an org-mode exporter allowing to blog with the [[https://gohugo.io][Hugo]]
platform in org-mode.

#+BEGIN_SRC emacs-lisp :results silent
  (use-package ox-hugo
    :after ox
    :ensure t)
#+END_SRC


** ox-taskjuggler

[[https://taskjuggler.org/][Taskjuggler]] is a text-based project management tool that can be used from org-mode using [[https://orgmode.org/worg/exporters/taskjuggler/ox-taskjuggler.html][ox-taskjuggler]].

A pre-requisite is to install task juggler:

#+begin_src bash
gem install taskjuggler
#+end_src

Once task juggler is installed, we need to enable its org-mode exporter ([[https://github.com/emacsmirror/org-contrib/blob/master/lisp/ox-taskjuggler.el][source]]):

#+begin_src emacs-lisp
  (use-package ox-taskjuggler
    :after ox
    :load-path "~/.emacs.d/elisp/")
#+end_src

** org-journal

Add support for [[https://github.com/bastibe/org-journal][org-journal]] when the directory =~/journal= is found:

#+begin_src emacs-lisp
  (use-package org-journal
   :if (file-directory-p "~/journal")
   :defer t
   :config
     (setq org-journal-dir "~/journal")
     (setq org-journal-file-type 'daily)
     (setq org-journal-date-format "%A, %d %B %Y")
   :init
     (setq org-journal-prefix-key "C-c j")
   :ensure t)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    ;;
    ;; This function was copied from
    ;; https://github.com/bastibe/org-journal and is used to integrate
    ;; org-journal with org-capture.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))
#+end_src

Commands of org-journal are available under the prefix ~C-c j~. If it becomes cumbersome, it is straightforward to integrate org-journal with org's template capture.

** org-noter

[[https://github.com/weirdNox/org-noter][org-noter]] allows us to take note about PDF documents directly in emacs:

#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :after org
    :ensure t)
#+END_SRC

** org-roam

[[https://www.orgroam.com][org-roam]] is a knowledge management system built on top of org-mode:

#+BEGIN_SRC emacs-lisp :results silent
  (use-package org-roam
    :preface
      (setq org-roam-directory "~/org-roam")
      (setq org-roam-v2-ack t)

    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n f" . org-roam-node-find))

    :if (file-directory-p org-roam-directory)
    :config
      (org-roam-db-autosync-mode)

      ;; setup org-roam-protocol
      (when window-system
	(server-start)
	(require 'org-roam-protocol))

    ;; We force org-roam to load in order to make sure the browser
    ;; integration work as soon a GUI emacs is started.
    :defer 2

    :ensure t)
#+END_SRC

*** Taking notes from the browser

Note taking in the browser is done in two steps:

1. Setup a the desktop to recognize the mime type associated with org-protocole.
2. Add a bookmarklet leveraging this new handler.
3. Start a server for =org-protocol= to interact with external programs.

For more details, see [[https://www.orgroam.com/manual.html#Org_002droam-Protocol][org-roam protocole the documentation]].

**** Linux

On Linux, we can =org-babel-tangle= this block:

#+begin_src conf :tangle ~/.local/share/applications/org-protocol.desktop :mkdirp yes
[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=/usr/share/icons/hicolor/scalable/apps/emacs.svg
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
#+end_src

and register it with:

#+begin_src sh :results silent
  xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

**** Bookmarklet

The following bookmarklet will summon org-roam from the browser:

#+begin_src js
  javascript:location.href =
    'org-protocol://roam-ref?template=r&ref='
    + encodeURIComponent(location.href)
    + '&title='
    + encodeURIComponent(document.title)
    + '&body='
    + encodeURIComponent(window.getSelection())
#+end_src

** Appearance

First, let's start by configuring the appearance of top level items:

#+BEGIN_SRC emacs-lisp
  ;; let's replace the stars with actual bullets
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :ensure t)
#+END_SRC

Make sure to run =M-x all-the-icons-install-fonts= at least once on
your system if the icons do not render well.

* Epilogue

** Custom values
Let's store custom values in a dedicated file:

#+BEGIN_SRC emacs-lisp
 (setq custom-file "~/.emacs.d/custom.el")
 (load custom-file)
#+END_SRC
